<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title></title>
    <style type="text/css" media="all">
      /* <![CDATA[ */
      .ctl input {
width: 300px;
}
#mapArea {
    width: 400px;
    height: 400px;
    background: #dddbf4;
}
      /* ]]> */
    </style>
<link rel="Stylesheet" type="text/css" href="jquery-ui-1.8.4.custom/css/ui-lightness/jquery-ui-1.8.4.custom.css" media="all" />
  </head>
  <body class="tundra">
    <canvas id="mapArea"/>

    <div class="ctl">
      <div>scale: <span id="scale" style="width: 500px; display: inline-block"/></div>
      <div>cx: <span id="cx" style="width: 500px; display: inline-block"/></div>
      <div>cy: <span id="cy" style="width: 500px; display: inline-block"/></div>
      <div id="paramDisplay"/>
    </div>

    <script type="text/javascript" src="jquery-1.4.2.min.js"></script>
    <script type="text/javascript" src="jquery-ui-1.8.4.custom/js/jquery-ui-1.8.4.custom.min.js"></script>

    <script type="text/javascript" src="gury/gury.js"></script>
    <script type="text/javascript" src="places.js"></script>
    <script type="text/javascript" src="sampledata.js"></script>
    <script type="text/javascript">
      // <![CDATA[

function dot(ctx, x, y, r, width, fill, stroke) {
    ctx.fillStyle = fill;
    ctx.beginPath();
    ctx.arc(x, y, r, 0, 2*Math.PI, true);
    ctx.fill();
    
    // combine these? i dont have my docs with me
    ctx.strokeStyle = stroke;
    ctx.lineWidth = width;
    ctx.beginPath();
    ctx.arc(x, y, r, 0, 2*Math.PI, true);
    ctx.stroke();
}

function findExtent(placeLocs) {
    var worldExtent = {};
    $.each(placeLocs, function (i, place) {
	if (worldExtent.minX == undefined || place[1][1] < worldExtent.minX) {
	    worldExtent.minX = place[1][1];
	}
	if (worldExtent.maxX == undefined || place[1][1] > worldExtent.maxX) {
	    worldExtent.maxX = place[1][1];
	}
	if (worldExtent.minY == undefined || place[1][0] < worldExtent.minY) {
	    worldExtent.minY = place[1][0];
	}
	if (worldExtent.maxY == undefined || place[1][0] > worldExtent.maxY) {
	    worldExtent.maxY = place[1][0];
	}
    });
    return worldExtent;
}

var worldExtent = findExtent(placeLoc);

function Grid(coords) {
    this.draw = function (ctx, canvas) {
	var s = {color: "black", width: .001};
	ctx.strokeStyle = "#000000";
	ctx.lineWidth=.5;
	ctx.beginPath();
	for (var x = worldExtent.minX; x < worldExtent.maxX; x += .1) {
	    var cx = coords.canX(x);
	    ctx.moveTo(cx, coords.canMinY);
	    ctx.lineTo(cx, coords.canMaxY);
	}
	for (var y = worldExtent.minY; y < worldExtent.maxY; y += .1) {
	    var cy = coords.canY(y);
	    ctx.moveTo(coords.canMinX, cy);
	    ctx.lineTo(coords.canMaxX, cy);
	}
	ctx.stroke();
    };
}

function Places(coords) {
    this.draw = function (ctx, canvas) {
	$.each(placeLoc, function(i, place) {	
	    // run these in importance order, use rtree to suppress
	    // any that would intersect with more-important ones. but
	    // if the label overlaps with another label or with a
	    // trail, try other positions in a circle around the
	    // point. This will look good when the label animates into
	    // something and it spins out of the way
	    var cx = coords.canX(place[1][1]), cy = coords.canY(place[1][0]);

	    dot(ctx, cx, cy, 3, 1, 'black', 'red');
            
	    ctx.fillStyle = "black";
            ctx.font = "12px sans-serif";
            //ctx.fillText(place[0], cx+5, cy+5);
	});
    }
}
function Trails(coords, trailPoints) {
    this.draw = function(ctx, canvas) {

	$.each(trailPoints, function (name, pts) {

	    ctx.strokeStyle = "#000000";
	    ctx.lineWidth=5;
	    ctx.beginPath();

	    $.each(pts, function (i, pt) {
		var cx = coords.canX(pt.longitude), cy = coords.canY(pt.latitude);
		if (i == 0) {
		    ctx.moveTo(cx, cy);
		} else {
		    ctx.lineTo(cx, cy);
		}
	    });
	    ctx.stroke();

	    $.each(pts, function (i, pt) {
		var cx = coords.canX(pt.longitude), cy = coords.canY(pt.latitude);
		dot(ctx, cx, cy, 3, 1, 'green', 'black');
		
	    });

	    var whereNow = pts[pts.length - 1];
	    var cx = coords.canX(whereNow.longitude), cy = coords.canY(whereNow.latitude);
	    ctx.fillStyle = "black";
	    ctx.font = "12px sans-serif";
	    ctx.fillText(name, cx+5, cy+5);

	});


    }
}

function centerPoint(params, pt, redraw) {
    for (var animStep=0; animStep < 50; animStep++) {
	setTimeout(function () {
	    params.cx = .99 * params.cx + .01 * pt.longitude;
	    params.cy = .99 * params.cy + .01 * pt.latitude;
	    redraw();
	}, animStep * 50);
    }
}

$(function() {
    var params = {"cx":-122.379,"cy":37.451,"scale":11.786};
    coords = {
	canMinX: 0, canMaxX: 400,
	canMinY: 0, canMaxY: 400,
	// projection goes here
	canX: function (wx) { return (wx-params.cx)*params.scale*400/5; },
	canY: function (wy) { return 400-(wy-params.cy)*params.scale*400/2; }
    };

    var trailPoints = {};

    g = $g('mapArea');
    g.size(400, 400)
    .add(new Grid(coords))
    .add(new Places(coords))
    .add(new Trails(coords, trailPoints))
    .draw();

    $("#scale").slider({min: 1, max: 20, step: .001});
    $("#cx").slider({min: -125, max: -120, step: .001});
    $("#cy").slider({min:37, max: 38, step: .001});

    $.each(["scale", "cx", "cy"], function(i,v) {
	$("#"+v).slider({value: params[v]});
	$("#"+v).slider({slide: function (ev, ui) {
	    params[v] = ui.value;
	    $("#paramDisplay").text(JSON.stringify(params));
	    g.draw();
	    return true;
	}});
    });

    trailPoints['drewp'] = trail1.slice(0, 4);
    trailPoints['kelsi'] = trail2.slice(0, 4);

    for (var x=1; x < 10; x++) {
	(function (start) {
	setTimeout(function () {
	    console.log("start", start);
	    trailPoints['drewp'] = trail1.slice(start, start+5);
	    centerPoint(params, trailPoints['drewp'][trailPoints['drewp'].length - 1], function () { g.draw() });
	    trailPoints['kelsi'] = trail2.slice(start, start+5);
	    centerPoint(params, trailPoints['kelsi'][trailPoints['kelsi'].length - 1], function () { g.draw() });
	    g.draw();
	}, 1000*start);
	})(x);
    }
});
// ]]>
    </script>

  </body>
</html>